
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  username      String    @unique
  password      String
  firstName     String
  lastName      String?
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  role          UserRole  @default(user)
  bookings      Booking[]
  reviews       Review[]
}

enum UserRole {
  admin
  user
}

model Movie {
  id              Int         @id @default(autoincrement())
  title           String
  description     String      @db.Text
  duration        Int         // Duration in minutes
  releaseDate     DateTime
  language        String
  posterUrl       String?
  trailerUrl      String?
  genre           MovieGenre[]
  rating          Float       @default(0)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  screenings      Screening[]
  reviews         Review[]
}

enum MovieGenre {
  ACTION
  ADVENTURE
  COMEDY
  DRAMA
  HORROR
  SCIFI
  THRILLER
  ROMANCE
  DOCUMENTARY
  ANIMATION
}

model Theater {
  id              Int         @id @default(autoincrement())
  name            String
  address         String
  city            String
  state           String
  zipCode         String
  totalScreens    Int
  contactNumber   String?
  email           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  screens         Screen[]
}

model Screen {
  id              Int         @id @default(autoincrement())
  name            String      // Example: Screen 1, Screen 2
  theaterId       Int
  theater         Theater     @relation(fields: [theaterId], references: [id])
  capacity        Int
  screenType      ScreenType  @default(STANDARD)
  screenings      Screening[]
  seatLayout      Seat[]
}

enum ScreenType {
  STANDARD
  IMAX
  PREMIUM
  VIP
}

model Seat {
  id              Int         @id @default(autoincrement())
  screenId        Int
  screen          Screen      @relation(fields: [screenId], references: [id])
  row             String      // Example: A, B, C
  number          Int         // Example: 1, 2, 3
  category        SeatCategory
  tickets         Ticket[]
}

enum SeatCategory {
  STANDARD
  PREMIUM
  VIP
}

model Screening {
  id              Int         @id @default(autoincrement())
  movieId         Int
  movie           Movie       @relation(fields: [movieId], references: [id])
  screenId        Int
  screen          Screen      @relation(fields: [screenId], references: [id])
  startTime       DateTime
  endTime         DateTime
  price           Decimal     @db.Decimal(10, 2)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tickets         Ticket[]
}

model Booking {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  bookingNumber   String        @unique
  totalAmount     Decimal       @db.Decimal(10, 2)
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  tickets         Ticket[]
}

model Ticket {
  id              Int         @id @default(autoincrement())
  bookingId       Int
  booking         Booking     @relation(fields: [bookingId], references: [id])
  screeningId     Int
  screening       Screening   @relation(fields: [screeningId], references: [id])
  seatId          Int
  seat            Seat        @relation(fields: [seatId], references: [id])
  price           Decimal     @db.Decimal(10, 2)
  ticketNumber    String      @unique
  isCheckedIn     Boolean     @default(false)
  createdAt       DateTime    @default(now())
}

model Review {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  movieId         Int
  movie           Movie       @relation(fields: [movieId], references: [id])
  rating          Int         @db.SmallInt // 1-5 rating
  comment         String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([userId, movieId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
}